[ { "title": "테스트", "url": "/posts/%ED%85%8C%EC%8A%A4%ED%8A%B8/", "categories": "", "tags": "", "date": "2022-05-08 00:00:00 +0900", "snippet": "테스트1테스트2 111 222 Written with StackEdit. " }, { "title": "Django 기초", "url": "/posts/Django-%EA%B8%B0%EC%B4%88/", "categories": "", "tags": "", "date": "2022-05-08 00:00:00 +0900", "snippet": "Django Study장고 프로젝트 기초1 장고 프로젝트 생성django-admin startproject 이름입력 (.) .입력시 현재경로에 생성1.1 프로젝트 설정파일 수정 (setting.py)1.1.1프로젝트 관련 설정값들은 settings.py 파일에서 관리됨 (루트 디렉토리, 기타 디렉토리 위치, 로그형식, 앱 명칭 등)1.1.2 ALLOWED_HOSTS DEBUG=TRUE -&gt; 개발모드 /FALSE -&gt; 운영모드로 인식 운영모드일 경우 ALLOWD_HOST에 반드시 서버 IP 또는 도메인 지정해야함 개발모드일 경우 기본값으로 [‘localhost’, ‘127.0.0.1’]로 지정됨1.1.3 앱 등록 프로젝트 내의 앱은 모두 설정파일에 등록 필요함 INSTALLED_APPLS 에 모듈명만 등록해도 되지만, 앱 설정 클래스로 등록하는 것이 더 정확함 startapp 앱이름 명령으로 자동생성된 apps.py 파일의 앱이름Config라고 정의되어 있음 'appname.apps.appnameConfig'##### 1.1.4 데이터베이스 장고는 SQLite3를 기본 데이터베이스로 사용 MySQL, PostgreSQL 등 다른 데이터베이스로 변경 가능 보통 개발단계에서 SQLite3로 테스트 후 운영 시 DB변경1.1.5 타임존 지정 프로젝트 생성 시 세계표준시(UTC)로 설정되어있음 한국 시간으로 변경 #TIME_ZONE = 'UTC'TIME_ZONE = 'Asia/Seoul' USE_TZ 설정을 TRUE로 하면 장고가 시간대를 조절함한국은 일광절약시간제를 사용하지 않으므로 USE_TZ=FALSE로 설정하는 것이 더 편리함 -&gt; DB에 저장되는 시간대도 UTC가 아닌 한국시간으로 저장됨1.2 기본테이블 생성python manage.py migrate 장고는 기본적으로 모든 프로젝트가 DB가 필요하다고 가정함 아직 DB나 테이블을 생성하지 않았더라도 User 등이 필요하다고 가정하고 기본적인 테이블을 만들어주기 위해 초기에 migrate 명령을 실행함 해당 명령 실행 시 SQLite3 DB파일인 db.sqlite3 파일이 생성됨1.3 슈퍼유저 생성python manage.py createsuperuser 입력 시 화면표시따라 Username / Email address / Password / Password(again) 입력 입력 시 127.0.0.1/admin 페이지에서 생성한 유저로 로그인 가능 로그인 시 Groups, Users 테이블이 이미 존재함 이는 settings.py에 django.contrib.auth 앱이 등록되어 있어서 장고에서 auth앱에 Users, Groups 테이블을 기본적으로 제공2. 장고 앱python manage.py starrtapp 앱이름2.1 Model모델은 DB에 테이블을 생성하고 관리하는 작업임 models.py : 테이블을 정의 admin.py : 정의한 테이블을 Admin 화면에 반영 python manage.py makemigrations : DB 변경사항 추출 python manage.py migrate : DB변경사항 반영2.1.1 테이블 정의from django.db import modelsclass Class1(models.Model):\tfield1 = models.Charfield(max_length=100)\t필드명 = models.필드유형(옵션)\t\tdef __str__(self):\t\treturn self.question_text 장고에서 테이블은 클래스로 정의함(django.db.models.Model을 상속) 컬럼(필드)는 클래스 안의 변수와 대응됨 기본키(Primary Key)는 클래스에서 미지정 시 장고가 자동으로 Not null, Autoincrement 설정하고 필드명은 id로 자동 생성 외래키(Foreing Key)는 다른 테이블의 기본키에 연결, 연결할 테이블명(클래스명) 입력하여 지정models.ForeignKey(연결할 클래스명)외래키 지정 시 외래키로 지정된 필드명은 ‘연결한 테이블명_id’이 됨 str() 은 객체를 문자열로 표현 시 사용하는 함수임__str__메소드를 사용하지 않으면 Admin화면이나 장고 쉘 화면에서 테이블명을 확인하기 어려움(테이블명이 아닌 숫자,영문으로 혼합된 알수없는 값으로 표현됨)2.1.2 Admin 사이트에 테이블 반영 초기에는 Admin 사이트에 기본제공 테이블인 Users, Groups 만 표시됨 models.py에서 생성한 테이블을 Admin 화면에 표시되도록 등록 즉 테이블 신규생성 시 models.py와 admin.py 를 함께 수정 from django.contrib import admin from appname.models import Tablename1, Tablename2\t admin.site.register(Tablename1) admin.site.register(Tablename2) 2.1.3 DB 변경사항 반영테이블 생성, 필드 수정, 삭제 등 DB 변경사항이 있을 경우, 이를 실제로 DB에 반영하는 작업을 수행해야함\tpython manage.py makemigrations\tpython manage.py migrate위 작업 수행 시python manage.py makemigrations 실행 시 appname\\migrations\\00001_initial.py\t- Create model Tablename\t- Add field fieldname to choice python manage.py migrate 실행 시operations to perform:\tApply all migrations: admin, auth .....Running migrations:\tApplying appname.001_initial...OK와 같은 메세지가 표시되며 마이그레이션이 수행됨2.2 View 및 Template2.2.1 url.py URLconf 코딩 시 보통 패키지 url.py에 include 함수를 통해 각 앱별 url에 연결 후 앱별로 url.py 설정(계층적 설정-&gt; 재사용 편리) # app1 앱 url에 연결 path('app1/', include(app1.urls')) url과 view는 1:1 또는 N:1 관계로 매핑됨필요한 모듈과 함수 임포트urlpattern은 위아서 아래로 순차적으로 매칭됨으로 순서 주의from django.contrib import adminfrom django.urls import pathfrom polls import viewsapp_name = 'app1'urlpatterns = [] path함수필수인자 : route, view / 선택인자 : kwargs, name route : URL 패턴을 표현하는 문자열 view : URL이 매칭되면 호출할 view함수. HttpRequest 객체, URL로부터 추출된 항목이 view함수 인자로 전달됨 kwargs : URL에서 추출된 항목 외에 추가인자를 view 함수에 전달 시 딕셔너리로 인자 정의 name : 각 RUL패턴별 이름 정의, 정의한 이름을 템플릿에서 사용 예 : path('app1/&lt;&lt;int:var1&gt;/', views.detail, name='detail'URL이 /app1/3/인 경우 URL에서 3이 추출되어 view함수에 전달되고 views.detail(request, var1=3)과 같이 인자가 대입되어 view함수 실행됨 app_name 은 여러가지 앱 존재 시 URL패턴 이름중복을 방지(예: app1과 app2의 URL 패턴에 둘다 detail 이름이 존재할 수 있음, 이 경우 앱네임으로 구분되어 충돌 방지) # 표기법 app1:detail app2:detail 2.2.2 View template에서 변수를 사용하려면 view 함수에서 context에 변수를 정의하여 template에 넘겨줘야함 # views.py from django.shrtcuts import render from app1.models import Class1\t def index(request): object_list1 = Class1.objects.all().order_by(-pub_date')[:5] context = {'object_list1': object_list1} return render(request, 'app1/index.html', context) Written with StackEdit." } ]
